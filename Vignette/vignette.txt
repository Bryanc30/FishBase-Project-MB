Species Location Comparer

1. Analyze the data set provided. In order for the command to work, the cloumn number of species names must be known. The command line will redirect the list of species names to a new file. If you are only interested in the first species name of the column, the last pipeline will redirect that species name into a new file. 

Command:
perl -pe 's/(.*)\;\n/\1Nothing\n/g' Sample_Data.txt | grep ';' | grep -v 'Nothing' | perl -pe 's/;;/;Nothing;/g' | perl -pe 's/\;/\t/g' | awk '{ print $10, $11 }' > thing.txt | head -n1 thing.txt > Final_Product.txt

Example input:  
12S_seq_number	X12S_first1000reads.LSC.A.1.S19.L001	X12S_first1000reads.LSC.A.2.S20.L001	sum taxonomy
forward_12S_2	1	0	Eukaryota;Chordata;Actinopteri;Centrarchiformes;Oplegnathidae;Oplegnathus;Oplegnathus woodwardi
forward_12S_3	1	0	Eukaryota;Chordata;Actinopteri;NA;Pomacentridae;Hypsypops;Hypsypops rubicundus
merged_12S_1	435	190	Eukaryota;Chordata;Actinopteri;;;;
merged_12S_15	16	0	Eukaryota;Chordata;Actinopteri;;Embiotocidae;Rhacochilus;Rhacochilus vacca

Example output: 
Oplegnathus woodwardi
Hypsypops rubicundus
Rhacochilus vacca

2. In order to find the geographic information of the desired species, the rgbif package in R studio must be used. Within the rgbif package we will be using 'occ_search'.
Since the scripts are made in Hoffman2, they will be run in Hoffman2.

To run the R script in Hoffman2, the required packages must be downloaded manually in R. To do this do the following. 

-module load R
-R
-in the command line within R, type 'install.packages('')
-The R script can now be run in Hoffman2, to quit R type 'quit()'

Script:
#!/usr/bin/env Rscript

#install.packages in R
#install.packages('openssl')
#install.packages('rgeos')
#install.packages('rgbif')

#Load Packages
library(openssl)
library(rgeos)
library(rgbif)

input = read.csv("thing.txt")
col <- input[[1]]

for (i in col){
	print(occ_search(scientificName = as.character(i)))

} 

To run the R script:
-Rscript script.R

Example output:
Records found [12480] 
Records returned [50] 
No. unique hierarchies [1] 
No. media records [50] 
No. facets [0] 
Args [limit=50, offset=0, scientificName=Ursus americanus, fields=all] 
# A tibble: 50 x 74
   key   scientificName decimalLatitude decimalLongitude issues
   <chr> <chr>                    <dbl>            <dbl> <chr> 
 1 1990… Ursus america…            44.9            -62.7 cdrou…
 2 1990… Ursus america…            40.9           -121.  gass84
 3 2006… Ursus america…            31.5           -110.  cdrou…
 4 1986… Ursus america…            30.1           -103.  cdrou…
 5 1990… Ursus america…            45.4            -93.2 cdrou…
# … with 40 more rows, and 69 more variables: datasetKey <chr>,
#   publishingOrgKey <chr>, networkKeys <chr>, installationKey <chr>,
#   publishingCountry <chr>, protocol <chr>, lastCrawled <chr>, 

If the output must be saved:
-Rscript script.R > file.txt 

If you're only interested in the data itself and not the information before and after, you can extract it from the file. However, you must know the number of lines that come before the file.
The extracted data can be svaed into a new file. 
Command: 
 head -n 14 data.txt | tail -n 7 > newfile.txt

3. The latitude and longitude data can be plotted on a map according to the species. The rgbif package also has a function that does this without having to plot the data manually.
The following script will plot the data for each scientific name in a file. 

Before running the script, an additional package must be manually installed in R. 

Script: 
#install.packages('raster')
library(raster)

input1 = read.csv("thing.txt", header = F)
col1 <- input1[[1]]

for (X in col1){
	print(X)
	name = ""
	key <- name_backbone(name = as.character(X))$speciesKey
	M <- map_fetch(taxonKey = key)
	name = paste("SpeciesPlot",X,".jpg")
	plot(M)
	jpeg(name)
	plot(M)
	dev.off()        
}
